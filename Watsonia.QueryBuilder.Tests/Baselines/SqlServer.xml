<?xml version="1.0" encoding="utf-8"?>
<baselines>
  <baseline key="TestMathLog10">
    SELECT *
    FROM [Orders] AS [o]
    WHERE LOG10([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathCeiling">
    SELECT *
    FROM [Orders] AS [o]
    WHERE CEILING([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathRoundToPlace">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ROUND([o].[OrderID], 2) = 0
  </baseline>
  <baseline key="TestMathFloor">
    SELECT *
    FROM [Orders] AS [o]
    WHERE FLOOR([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathTruncate">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ROUND([o].[OrderID], 0, 1) = 0
  </baseline>
  <baseline key="TestStringCompareToLessThan">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &lt; 0
  </baseline>
  <baseline key="TestStringCompareToLessThanOrEqualTo">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &lt;= 0
  </baseline>
  <baseline key="TestStringCompareToGreaterThan">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &gt; 0
  </baseline>
  <baseline key="TestStringCompareToGreaterThanOrEqualTo">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &gt;= 0
  </baseline>
  <baseline key="TestStringCompareToEquals">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) = 0
  </baseline>
  <baseline key="TestStringCompareToNotEquals">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &lt;&gt; 0
  </baseline>
  <baseline key="TestStringCompareLessThan">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &lt; 0
  </baseline>
  <baseline key="TestStringCompareLessThanOrEqualTo">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &lt;= 0
  </baseline>
  <baseline key="TestStringCompareGreaterThan">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &gt; 0
  </baseline>
  <baseline key="TestStringCompareGreaterThanOrEqualTo">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &gt;= 0
  </baseline>
  <baseline key="TestStringCompareEquals">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) = 0
  </baseline>
  <baseline key="TestStringCompareNotEquals">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CASE WHEN [c].[City] = 'Seattle' THEN 0 WHEN [c].[City] &lt; 'Seattle' THEN -1 ELSE 1 END) &lt;&gt; 0
  </baseline>
  <baseline key="TestIntCompareTo">
    SELECT *
    FROM [Orders] AS [o]
    WHERE (CASE WHEN [o].[OrderID] = 1000 THEN 0 WHEN [o].[OrderID] &lt; 1000 THEN -1 ELSE 1 END) = 0
  </baseline>
  <baseline key="TestDecimalCompare">
    SELECT *
    FROM [Orders] AS [o]
    WHERE (CASE WHEN [o].[OrderID] = 0.0 THEN 0 WHEN [o].[OrderID] &lt; 0.0 THEN -1 ELSE 1 END) = 0
  </baseline>
  <baseline key="TestDecimalAdd">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] + 0.0) = 0.0
  </baseline>
  <baseline key="TestDecimalSubtract">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] - 0.0) = 0.0
  </baseline>
  <baseline key="TestDecimalMultiply">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] * 1.0) = 1.0
  </baseline>
  <baseline key="TestDecimalDivide">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] / 1.0) = 1.0
  </baseline>
  <baseline key="TestDecimalRemainder">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] % 1.0) = 0.0
  </baseline>
  <baseline key="TestDecimalNegate">
    SELECT *
    FROM [Orders] AS [o]
    WHERE -[o].[OrderID] = 1.0
  </baseline>
  <baseline key="TestDecimalRoundDefault">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ROUND([o].[OrderID], 0) = 0
  </baseline>
  <baseline key="TestDecimalRoundPlaces">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ROUND([o].[OrderID], 2) = 0.00
  </baseline>
  <baseline key="TestDecimalTruncate">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ROUND([o].[OrderID], 0, 1) = 0
  </baseline>
  <baseline key="TestDecimalCeiling">
    SELECT *
    FROM [Orders] AS [o]
    WHERE CEILING([o].[OrderID]) = 0.0
  </baseline>
  <baseline key="TestDecimalFloor">
    SELECT *
    FROM [Orders] AS [o]
    WHERE FLOOR([o].[OrderID]) = 0.0
  </baseline>
  <baseline key="TestDecimalLessThan">
    SELECT *
    FROM [Orders] AS [o]
    WHERE [o].[OrderID] &lt; 0.0
  </baseline>
  <baseline key="TestIntLessThan">
    SELECT *
    FROM [Orders] AS [o]
    WHERE [o].[OrderID] &lt; 0
  </baseline>
  <baseline key="TestIntLessThanOrEqual">
    SELECT *
    FROM [Orders] AS [o]
    WHERE [o].[OrderID] &lt;= 0
  </baseline>
  <baseline key="TestIntGreaterThan">
    SELECT *
    FROM [Orders] AS [o]
    WHERE [o].[OrderID] &gt; 0
  </baseline>
  <baseline key="TestIntGreaterThanOrEqual">
    SELECT *
    FROM [Orders] AS [o]
    WHERE [o].[OrderID] &gt;= 0
  </baseline>
  <baseline key="TestIntEqual">
    SELECT *
    FROM [Orders] AS [o]
    WHERE [o].[OrderID] = 0
  </baseline>
  <baseline key="TestIntNotEqual">
    SELECT *
    FROM [Orders] AS [o]
    WHERE [o].[OrderID] &lt;&gt; 0
  </baseline>
  <baseline key="TestIntAdd">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] + 0) = 0
  </baseline>
  <baseline key="TestIntSubtract">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] - 0) = 0
  </baseline>
  <baseline key="TestIntMultiply">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] * 1) = 1
  </baseline>
  <baseline key="TestIntDivide">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] / 1) = 1
  </baseline>
  <baseline key="TestIntModulo">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] % 1) = 0
  </baseline>
  <baseline key="TestIntLeftShift">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] * POWER(2, 1)) = 0
  </baseline>
  <baseline key="TestIntRightShift">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] / POWER(2, 1)) = 0
  </baseline>
  <baseline key="TestIntBitwiseAnd">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] &amp; 1) = 0
  </baseline>
  <baseline key="TestIntBitwiseOr">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] | 1) = 1
  </baseline>
  <baseline key="TestIntBitwiseExclusiveOr">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] ^ 1) = 1
  </baseline>
  <baseline key="TestIntBitwiseNot">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ~[o].[OrderID] = 0
  </baseline>
  <baseline key="TestIntNegate">
    SELECT *
    FROM [Orders] AS [o]
    WHERE -[o].[OrderID] = -1
  </baseline>
  <baseline key="TestAnd">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] &gt; 0 AND [o].[OrderID] &lt; 2000)
  </baseline>
  <baseline key="TestOr">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderID] &lt; 5 OR [o].[OrderID] &gt; 10)
  </baseline>
  <baseline key="TestNot">
    SELECT *
    FROM [Orders] AS [o]
    WHERE NOT [o].[OrderID] = 0
  </baseline>
  <baseline key="TestEqualNull">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[City] IS NULL
  </baseline>
  <baseline key="TestEqualNullReverse">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[City] IS NULL
  </baseline>
  <baseline key="TestConditional">
    SELECT *
    FROM [Orders] AS [o]
    WHERE (CASE WHEN [o].[CustomerID] = 'ALFKI' THEN 1000 ELSE 0 END) = 1000
  </baseline>
  <baseline key="TestConditional2">
    SELECT *
    FROM [Orders] AS [o]
    WHERE (CASE WHEN [o].[CustomerID] = 'ALFKI' THEN 1000 WHEN [o].[CustomerID] = 'ABCDE' THEN 2000 ELSE 0 END) = 1000
  </baseline>
  <baseline key="TestConditionalTestIsValue">
    SELECT *
    FROM [Orders] AS [o]
    WHERE (CASE [o].[OrderID] WHEN 0 THEN 200 ELSE 100 END) = 100
  </baseline>
  <baseline key="TestConditionalResultsArePredicates">
    SELECT *
    FROM [Orders] AS [o]
    WHERE CASE WHEN ([o].[CustomerID] = 'ALFKI') THEN CASE WHEN (([o].[OrderID] &lt; 10)) THEN 1 ELSE 0 END ELSE CASE WHEN (([o].[OrderID] &gt; 10)) THEN 1 ELSE 0 END END &lt;&gt; 0
  </baseline>
  <baseline key="TestSelectManyJoined">
    SELECT [c].[ContactName], [o].[OrderDate]
    FROM [Customers] AS [c]
    INNER JOIN [Orders]
    ON ([o].[CustomerID] = [c].[CustomerID])
  </baseline>
  <baseline key="TestSelectManyJoinedDefaultIfEmpty">
    SELECT [c].[ContactName], [o].[OrderDate]
    FROM [Customers] AS [c]
    LEFT OUTER JOIN [Orders]
    ON ([o].[CustomerID] = [c].[CustomerID])
  </baseline>
  <baseline key="TestSelectWhereAssociation">
    SELECT *
    FROM [Orders] AS [o]
    LEFT OUTER JOIN [Customers]
    ON ([c].[CustomerID] = [o].[CustomerID])
    WHERE [c].[City] = 'London'
  </baseline>
  <baseline key="TestSelectWhereAssociations">
    SELECT *
    FROM [Orders] AS [o]
    LEFT OUTER JOIN [Customers]
    ON ([c].[CustomerID] = [o].[CustomerID])
    WHERE ([c].[City] = 'London') AND ([c].[Phone] &lt;&gt; @1)
  </baseline>
  <baseline key="TestSelectWhereAssociationTwice">
    SELECT *
    FROM [Orders] AS [o]
    LEFT OUTER JOIN [Customers]
    ON ([c].[CustomerID] = [o].[CustomerID])
    WHERE ([c].[City] = 'London') AND ([c].[Phone] &lt;&gt; @1)
  </baseline>
  <baseline key="TestSelectAssociation">
    SELECT [c].[CustomerID] AS [CustomerID1], *
    FROM [Orders] AS [o]
    LEFT OUTER JOIN [Customers]
    ON ([c].[CustomerID] = [o].[CustomerID])
  </baseline>
  <baseline key="TestSelectAssociations">
    SELECT [c].[CustomerID], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[Country] AS [CustomerID1], [c].[Phone]
    FROM [Orders] AS [o]
    LEFT OUTER JOIN [Customers]
    ON ([c].[CustomerID] = [o].[CustomerID])
  </baseline>
  <baseline key="TestSelectAssociationsWhereAssociations">
    SELECT [c].[CustomerID], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[Country] AS [CustomerID1], [c].[Phone]
    FROM [Orders] AS [o]
    LEFT OUTER JOIN [Customers]
    ON ([c].[CustomerID] = [o].[CustomerID])
    WHERE ([c].[City] = 'London') AND ([c].[Phone] &lt;&gt; @1)
  </baseline>
  <baseline key="TestSingletonAssociationWithMemberAccess">
    SELECT [c].[CustomerID], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[Country] AS [CustomerID1], [c].[Phone]
    FROM [Orders] AS [o]
    LEFT OUTER JOIN [Customers]
    ON ([c].[CustomerID] = [o].[CustomerID])
    WHERE ([c].[City] = 'London') AND ([c].[Phone] &lt;&gt; @1)
  </baseline>
  <baseline key="TestCompareDateTimesWithDifferentNullability">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ([o].[OrderDate] &lt; @0) AND ([o].[OrderDate] &lt; @1)
  </baseline>
  <baseline key="TestContainsWithEmptyLocalList">
    SELECT *
    FROM [Customers] AS [c]
    WHERE 0 &lt;&gt; 0
  </baseline>
  <baseline key="TestContainsWithSubquery2">
		SELECT [c].[City], [c].[CompanyName], [c].[ContactName], [c].[Country], [c].[CustomerID], [c].[Phone]
		FROM [Customers] AS [c]
		WHERE [c].[CustomerID] IN (
		SELECT [c2].[CustomerID]
		FROM [Customers] AS [c2]
		WHERE [c2].[City] = 'London'
		)
	</baseline>
  <baseline key="TestCombineQueriesDeepNesting">
    SELECT [Order Details].[OrderID], [Order Details].[ProductID]
    FROM [Order Details] AS [Order Details]
    WHERE EXISTS(
    SELECT NULL
    FROM [Orders] AS [o]
    WHERE (EXISTS(
    SELECT NULL
    FROM [Customers] AS [c]
    WHERE ([c].[ContactName] LIKE @0 + '%') AND ([c].[CustomerID] = [o].[CustomerID])
    ) AND ([o].[OrderID] = [Order Details].[OrderID]))
    )
  </baseline>
  <baseline key="TestLetWithSubquery">
    SELECT *, (
    SELECT COUNT(*)
    FROM [Orders] AS [o]
    WHERE [o].[CustomerID] = [c].[CustomerID]
    ) AS [c0]
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSkipTakeDistinct">
    SELECT DISTINCT [RowNumberTable].[CustomerID], [RowNumberTable].[City], [RowNumberTable].[CompanyName], [RowNumberTable].[ContactName], [RowNumberTable].[Country], [RowNumberTable].[Phone]
    FROM (
    SELECT *, ROW_NUMBER() OVER(ORDER BY [c].[ContactName]) AS RowNumber
    FROM [Customers] AS [c]
    ) AS [RowNumberTable]
    WHERE [RowNumber] &gt; 5 AND [RowNumber] &lt;= 15
    ORDER BY [RowNumberTable].[ContactName]
  </baseline>
  <baseline key="TestTakeSkipDistinct">
    SELECT DISTINCT t0.[City], t0.[CompanyName], t0.[ContactName], t0.[Country], t0.[CustomerID], t0.[Phone]
    FROM (
    SELECT t1.[City], t1.[CompanyName], t1.[ContactName], t1.[Country], t1.[CustomerID], t1.[Phone]
    FROM (
    SELECT ROW_NUMBER() OVER(ORDER BY t2.[ContactName]) AS [_rownum], t2.[City], t2.[CompanyName], t2.[ContactName], t2.[Country], t2.[CustomerID], t2.[Phone]
    FROM (
    SELECT TOP (10) *
    FROM [Customers] AS [c]
    ORDER BY [c].[ContactName]
    ) AS t2
    ) AS t1
    WHERE t1.[_rownum] &gt; 5
    ) AS t0
  </baseline>
  <baseline key="TestFirst">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    ORDER BY [c].[ContactName]
  </baseline>
  <baseline key="TestFirstPredicate">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName]
  </baseline>
  <baseline key="TestWhereFirst">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName]
  </baseline>
  <baseline key="TestFirstOrDefault">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    ORDER BY [c].[ContactName]
  </baseline>
  <baseline key="TestFirstOrDefaultPredicate">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName]
  </baseline>
  <baseline key="TestWhereFirstOrDefault">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName]
  </baseline>
  <baseline key="TestReverse">
    SELECT *
    FROM [Customers] AS [c]
    ORDER BY [c].[ContactName] DESC
  </baseline>
  <baseline key="TestReverseReverse">
    SELECT *
    FROM [Customers] AS [c]
    ORDER BY [c].[ContactName]
  </baseline>
  <baseline key="TestReverseWhereReverse">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName]
  </baseline>
  <baseline key="TestReverseTakeReverse">
    SELECT t0.[City], t0.[CompanyName], t0.[ContactName], t0.[Country], t0.[CustomerID], t0.[Phone]
    FROM (
    SELECT TOP (5) *
    FROM [Customers] AS [c]
    ORDER BY [c].[ContactName] DESC
    ) AS t0
    ORDER BY t0.[ContactName]
  </baseline>
  <baseline key="TestReverseWhereTakeReverse">
    SELECT t0.[City], t0.[CompanyName], t0.[ContactName], t0.[Country], t0.[CustomerID], t0.[Phone]
    FROM (
    SELECT TOP (5) *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName] DESC
    ) AS t0
    ORDER BY t0.[ContactName]
  </baseline>
  <baseline key="TestLast">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    ORDER BY [c].[ContactName] DESC
  </baseline>
  <baseline key="TestLastPredicate">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName] DESC
  </baseline>
  <baseline key="TestWhereLast">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName] DESC
  </baseline>
  <baseline key="TestLastOrDefault">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    ORDER BY [c].[ContactName] DESC
  </baseline>
  <baseline key="TestLastOrDefaultPredicate">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName] DESC
  </baseline>
  <baseline key="TestWhereLastOrDefault">
    SELECT TOP (1) *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
    ORDER BY [c].[ContactName] DESC
  </baseline>
  <baseline key="TestSingle">
    SELECT [g_1].[CustomerID], [g_1].[City], [g_1].[CompanyName], [g_1].[ContactName], [g_1].[Country], [g_1].[Phone]
    FROM [Customers] AS [g_1]
  </baseline>
  <baseline key="TestSinglePredicate">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] = 'ALFKI'
  </baseline>
  <baseline key="TestWhereSingle">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] = 'ALFKI'
  </baseline>
  <baseline key="TestSingleOrDefault">
    SELECT *
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSingleOrDefaultPredicate">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] = 'ALFKI'
  </baseline>
  <baseline key="TestWhereSingleOrDefault">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] = 'ALFKI'
  </baseline>
  <baseline key="TestAnyWithSubquery">
    SELECT *
    FROM [Customers] AS [c]
    WHERE EXISTS(
    SELECT NULL
    FROM [Orders] AS [o]
    WHERE ([o].[CustomerID] = [c].[CustomerID]) AND (DATEPART(year, [o].[OrderDate]) = 1997)
    )
  </baseline>
  <baseline key="TestAnyWithSubqueryNoPredicate">
    SELECT *
    FROM [Customers] AS [c]
    WHERE EXISTS(
    SELECT NULL
    FROM [Orders] AS [o]
    WHERE [o].[CustomerID] = [c].[CustomerID]
    )
  </baseline>
  <baseline key="TestAnyWithLocalCollection">
    SELECT *
    FROM [Customers] AS [c]
    WHERE ([c].[CustomerID] = 'ALFKI') OR ([c].[CustomerID] = @1)
  </baseline>
  <baseline key="TestAnyTopLevel">
    SELECT CASE WHEN EXISTS (
    SELECT [g_1].[CustomerID], [g_1].[City], [g_1].[CompanyName], [g_1].[ContactName], [g_1].[Country], [g_1].[Phone]
    FROM [Customers] AS [g_1]
    ) THEN 1 ELSE 0 END
  </baseline>
  <baseline key="TestAllWithSubquery">
		SELECT *
		FROM [Customers] AS [c]
		WHERE NOT EXISTS(
		SELECT NULL
		FROM [Orders] AS [o]
		WHERE ([o].[CustomerID] = [c].[CustomerID]) AND NOT (DATEPART(year, [o].[OrderDate]) = 1997)
		)
	</baseline>
  <baseline key="TestAllWithLocalCollection">
    SELECT *
    FROM [Customers] AS [c]
    WHERE ([c].[ContactName] LIKE '%' + @0 + '%') AND ([c].[ContactName] LIKE '%' + @1 + '%')
  </baseline>
  <baseline key="TestAllTopLevel">
    SELECT CASE WHEN NOT EXISTS (
    SELECT *
    FROM [Customers] AS [c]
    WHERE NOT [c].[ContactName] LIKE 'a' + '%'
    ) THEN 1 ELSE 0 END
  </baseline>
  <baseline key="TestContainsWithSubquery">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] IN (
    SELECT [o].[CustomerID]
    FROM [Orders] AS [o]
    )
  </baseline>
  <baseline key="TestContainsWithLocalCollection">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] IN ('ABCDE', 'ALFKI')
  </baseline>
  <baseline key="TestContainsTopLevel">
    SELECT CASE WHEN 'ALFKI' IN (
    SELECT [c].[CustomerID]
    FROM [Customers] AS [c]
    ) THEN 1 ELSE 0 END
  </baseline>
  <baseline key="TestCoalesce">
    SELECT *
    FROM [Customers] AS [c]
    WHERE COALESCE([c].[City], @0) = @0
  </baseline>
  <baseline key="TestCoalesce2">
    SELECT *
    FROM [Customers] AS [c]
    WHERE COALESCE([c].[City], [c].[Country], @0) = @0
  </baseline>
  <baseline key="TestStringLength">
    SELECT *
    FROM [Customers] AS [c]
    WHERE LEN([c].[City]) = 7
  </baseline>
  <baseline key="TestStringStartsWithLiteral">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[ContactName] LIKE 'M' + '%'
  </baseline>
  <baseline key="TestStringStartsWithColumn">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[ContactName] LIKE [c].[ContactName] + '%'
  </baseline>
  <baseline key="TestStringEndsWithLiteral">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[ContactName] LIKE '%' + 's'
  </baseline>
  <baseline key="TestStringEndsWithColumn">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[ContactName] LIKE '%' + [c].[ContactName]
  </baseline>
  <baseline key="TestStringContainsLiteral">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[ContactName] LIKE '%' + 'and' + '%'
  </baseline>
  <baseline key="TestStringContainsColumn">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[ContactName] LIKE '%' + [c].[ContactName] + '%'
  </baseline>
  <baseline key="TestStringConcatImplicit2Args">
    SELECT *
    FROM [Customers] AS [c]
    WHERE ([c].[ContactName] + 'X') = 'X'
  </baseline>
  <baseline key="TestStringConcatExplicit2Args">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[ContactName] + 'X' = 'X'
  </baseline>
  <baseline key="TestStringConcatExplicit3Args">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[ContactName] + 'X' + [c].[Country] = 'X'
  </baseline>
  <baseline key="TestStringConcatExplicitNArgs">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[ContactName] + 'X' + [c].[Country] = 'X'
  </baseline>
  <baseline key="TestStringIsNullOrEmpty">
    SELECT *
    FROM [Customers] AS [c]
    WHERE ([c].[City] IS NULL OR [c].[City] = '')
  </baseline>
  <baseline key="TestStringToUpper">
    SELECT *
    FROM [Customers] AS [c]
    WHERE UPPER([c].[City]) = 'SEATTLE'
  </baseline>
  <baseline key="TestStringToLower">
    SELECT *
    FROM [Customers] AS [c]
    WHERE LOWER([c].[City]) = 'seattle'
  </baseline>
  <baseline key="TestStringSubstring">
    SELECT *
    FROM [Customers] AS [c]
    WHERE SUBSTRING([c].[City], 0 + 1, 4) = 'Seat'
  </baseline>
  <baseline key="TestStringSubstringNoLength">
    SELECT *
    FROM [Customers] AS [c]
    WHERE SUBSTRING([c].[City], 4 + 1, 8000) = 'tle'
  </baseline>
  <baseline key="TestStringIndexOf">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CHARINDEX('tt', [c].[City]) - 1) = 4
  </baseline>
  <baseline key="TestStringIndexOfChar">
    SELECT *
    FROM [Customers] AS [c]
    WHERE (CHARINDEX('t', [c].[City]) - 1) = 4
  </baseline>
  <baseline key="TestStringTrim">
    SELECT *
    FROM [Customers] AS [c]
    WHERE RTRIM(LTRIM([c].[City])) = 'Seattle'
  </baseline>
  <baseline key="TestStringToString">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'Seattle'
  </baseline>
  <baseline key="TestStringReplace">
    SELECT *
    FROM [Customers] AS [c]
    WHERE REPLACE([c].[City], 'ea', 'ae') = 'Saettle'
  </baseline>
  <baseline key="TestStringReplaceChars">
    SELECT *
    FROM [Customers] AS [c]
    WHERE REPLACE([c].[City], 'e', 'y') = 'Syattly'
  </baseline>
  <baseline key="TestStringRemove">
    SELECT *
    FROM [Customers] AS [c]
    WHERE STUFF([c].[City], 1 + 1, 2, '') = 'Sttle'
  </baseline>
  <baseline key="TestStringRemoveNoCount">
    SELECT *
    FROM [Customers] AS [c]
    WHERE STUFF([c].[City], 4 + 1, 8000, '') = 'Seat'
  </baseline>
  <baseline key="TestDateTimeConstructYmd">
    SELECT *
    FROM [Orders] AS [o]
    WHERE [o].[OrderDate] = CONVERT(DATETIME, CONVERT(NVARCHAR, DATEPART(year, [o].[OrderDate])) + '/' + CONVERT(NVARCHAR, 1) + '/' + CONVERT(NVARCHAR, 1))
  </baseline>
  <baseline key="TestDateTimeConstructYmdhms">
    SELECT *
    FROM [Orders] AS [o]
    WHERE [o].[OrderDate] = CONVERT(DATETIME, CONVERT(NVARCHAR, DATEPART(year, [o].[OrderDate])) + '/' + CONVERT(NVARCHAR, 1) + '/' + CONVERT(NVARCHAR, 1) + ' ' + CONVERT(NVARCHAR, 10) + ':' + CONVERT(NVARCHAR, 25) + ':' + CONVERT(NVARCHAR, 55))
  </baseline>
  <baseline key="TestDateTimeDay">
    SELECT *
    FROM [Orders] AS [o]
    WHERE DATEPART(day, [o].[OrderDate]) = 5
  </baseline>
  <baseline key="TestDateTimeMonth">
    SELECT *
    FROM [Orders] AS [o]
    WHERE DATEPART(month, [o].[OrderDate]) = 12
  </baseline>
  <baseline key="TestDateTimeYear">
    SELECT *
    FROM [Orders] AS [o]
    WHERE DATEPART(year, [o].[OrderDate]) = 1997
  </baseline>
  <baseline key="TestDateTimeHour">
    SELECT *
    FROM [Orders] AS [o]
    WHERE DATEPART(hour, [o].[OrderDate]) = 6
  </baseline>
  <baseline key="TestDateTimeMinute">
    SELECT *
    FROM [Orders] AS [o]
    WHERE DATEPART(minute, [o].[OrderDate]) = 32
  </baseline>
  <baseline key="TestDateTimeSecond">
    SELECT *
    FROM [Orders] AS [o]
    WHERE DATEPART(second, [o].[OrderDate]) = 47
  </baseline>
  <baseline key="TestDateTimeMillisecond">
    SELECT *
    FROM [Orders] AS [o]
    WHERE DATEPART(millisecond, [o].[OrderDate]) = 200
  </baseline>
  <baseline key="TestDateTimeDayOfYear">
    SELECT *
    FROM [Orders] AS [o]
    WHERE (DATEPART(dayofyear, [o].[OrderDate]) - 1) = 360
  </baseline>
  <baseline key="TestDateTimeDayOfWeek">
    SELECT *
    FROM [Orders] AS [o]
    WHERE (DATEPART(weekday, [o].[OrderDate]) - 1) = 5
  </baseline>
  <baseline key="TestMathAbs">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ABS([o].[OrderID]) = 10
  </baseline>
  <baseline key="TestMathAtan">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ATAN([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathCos">
    SELECT *
    FROM [Orders] AS [o]
    WHERE COS([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathSin">
    SELECT *
    FROM [Orders] AS [o]
    WHERE SIN([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathTan">
    SELECT *
    FROM [Orders] AS [o]
    WHERE TAN([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathExp">
    SELECT *
    FROM [Orders] AS [o]
    WHERE EXP([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathLog">
    SELECT *
    FROM [Orders] AS [o]
    WHERE LOG([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathSqrt">
    SELECT *
    FROM [Orders] AS [o]
    WHERE SQRT([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathPow">
    SELECT *
    FROM [Orders] AS [o]
    WHERE POWER((CASE WHEN [o].[OrderID] &lt; 1000 THEN 1 ELSE 2 END), 3) = 0
  </baseline>
  <baseline key="TestMathRoundDefault">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ROUND([o].[OrderID], 0) = 0
  </baseline>
  <baseline key="TestMathAcos">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ACOS([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathAsin">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ASIN([o].[OrderID]) = 0
  </baseline>
  <baseline key="TestMathAtan2">
    SELECT *
    FROM [Orders] AS [o]
    WHERE ATAN2([o].[OrderID], 3) = 0
  </baseline>
  <baseline key="TestWhere">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'
  </baseline>
  <baseline key="TestWhereTrue">
    SELECT *
    FROM [Customers] AS [c]
    WHERE 1 &lt;&gt; 0
  </baseline>
  <baseline key="TestWhereFalse">
    SELECT *
    FROM [Customers] AS [c]
    WHERE 0 &lt;&gt; 0
  </baseline>
  <baseline key="TestCompareEntityEqual">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] = 'ALFKI'
  </baseline>
  <baseline key="TestCompareEntityNotEqual">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] &lt;&gt; 'ALFKI'
  </baseline>
  <baseline key="TestCompareConstructedEqual">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[City] = { x = London }
  </baseline>
  <baseline key="TestCompareConstructedMultiValueEqual">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London') AND ([c].[Country] = 'UK'
  </baseline>
  <baseline key="TestCompareConstructedMultiValueNotEqual">
    SELECT *
    FROM [Customers] AS [c]
    WHERE NOT (([c].[City] = 'London') AND ([c].[Country] = 'UK'))
  </baseline>
  <baseline key="TestCompareConstructed">
    SELECT *
    FROM [Customers] AS [c]
    WHERE [c].[City] = { x = London }
  </baseline>
  <baseline key="TestSelectScalar">
    SELECT [c].[City]
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectAnonymousOne">
    SELECT [c].[City]
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectAnonymousTwo">
    SELECT [c].[City], [c].[Phone]
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectAnonymousThree">
    SELECT [c].[City], [c].[Phone], [c].[Country]
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectCustomerTable">
    SELECT *
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectCustomerIdentity">
    SELECT *
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectAnonymousWithObject">
    SELECT *
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectAnonymousNested">
    SELECT [c].[CustomerID], [c].[City], [c].[Country]
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectAnonymousEmpty">
    SELECT NULL
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectAnonymousLiteral">
    SELECT NULL
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectConstantInt">
    SELECT 0
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectConstantNullString">
    SELECT NULL
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectLocal">
    SELECT 10
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectNestedCollection">
    SELECT [c].[CustomerID]
    FROM [Customers] AS [c]
    WHERE [c].[City] = 'London'

    SELECT [o].[OrderID]
    FROM [Orders] AS [o]
    WHERE [o].[CustomerID] = @n0) AND (DATEPART(year, [o].[OrderDate]) = 1997
  </baseline>
  <baseline key="TestSelectNestedCollectionInAnonymousType">
    SELECT [o].[OrderID], [o].[CustomerID], [o].[OrderID]
    FROM [Customers] AS [c]
    LEFT OUTER JOIN [Orders]
    ON (([o].[CustomerID] = [c].[CustomerID]) AND (DATEPART(year, [o].[OrderDate]) = 1997))
    WHERE [c].[CustomerID] = 'ALFKI'

    SELECT [c].[CustomerID]
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] = 'ALFKI'
  </baseline>
  <baseline key="TestJoinCustomerOrders">
    SELECT [c].[ContactName], [o].[OrderID]
    FROM [Customers] AS [c]
    LEFT OUTER JOIN [Orders] As [o]
    ON ([c].[CustomerID] = [o].[CustomerID])
  </baseline>
  <baseline key="TestJoinMultiKey">
    SELECT *, [o].[CustomerID] AS [CustomerID1], [o].[OrderDate]
    FROM [Customers] AS [c]
    INNER JOIN [Orders]
    ON (([c].[CustomerID] = [o].[CustomerID]) AND ([c].[CustomerID] = [o].[CustomerID]))
  </baseline>
  <baseline key="TestJoinIntoCustomersOrders">
    SELECT *
    FROM [Customers] AS [c]
    LEFT OUTER JOIN [Orders]
    ON ([o].[CustomerID] = [c].[CustomerID])

    SELECT *
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestJoinIntoCustomersOrdersCount">
    SELECT *, (
    SELECT COUNT(*)
    FROM [Orders] AS [o]
    WHERE [o].[CustomerID] = [c].[CustomerID]
    ) AS [c0]
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestJoinIntoDefaultIfEmpty">
    SELECT *, [o].[CustomerID] AS [CustomerID1], [o].[OrderDate]
    FROM [Customers] AS [c]
    LEFT OUTER JOIN [Orders]
    ON ([o].[CustomerID] = [c].[CustomerID])
  </baseline>
  <baseline key="TestSelectManyCustomerOrders">
    SELECT [c].[ContactName], [o].[OrderID]
    FROM [Customers] AS [c]
    INNER JOIN [Orders]
    ON ([c].[CustomerID] = [o].[CustomerID])
  </baseline>
  <baseline key="TestMultipleJoinsWithJoinConditionsInWhere">
    SELECT [Order Details].[ProductID]
    FROM [Customers] AS [c]
    INNER JOIN [Orders]
    ON ([o].[CustomerID] = [c].[CustomerID])
    INNER JOIN [Order Details] AS [Order Details]
    ON ([o].[OrderID] = [Order Details].[OrderID])
    WHERE [c].[CustomerID] = 'ALFKI'
  </baseline>
  <baseline key="TestMultipleJoinsWithMissingJoinCondition">
    SELECT [Order Details].[ProductID]
    FROM [Customers] AS [c]
    INNER JOIN [Orders]
    ON ([o].[CustomerID] = [c].[CustomerID])
    CROSS JOIN [Order Details]
    WHERE [c].[CustomerID] = 'ALFKI'
  </baseline>
  <baseline key="TestOrderBy">
    SELECT *
    FROM [Customers] AS [c]
    ORDER BY [c].[CustomerID]
  </baseline>
  <baseline key="TestOrderBySelect">
    SELECT [c].[ContactName]
    FROM [Customers] AS [c]
    ORDER BY [c].[CustomerID]
  </baseline>
  <baseline key="TestOrderByOrderBy">
    SELECT [c].[City]
    FROM [Customers] AS [c]
    ORDER BY [c].[CustomerID], [c].[Country]
  </baseline>
  <baseline key="TestOrderByThenBy">
    SELECT [c].[City]
    FROM [Customers] AS [c]
    ORDER BY [c].[CustomerID], [c].[Country]
  </baseline>
  <baseline key="TestOrderByDescending">
    SELECT [c].[City]
    FROM [Customers] AS [c]
    ORDER BY [c].[CustomerID] DESC
  </baseline>
  <baseline key="TestOrderByDescendingThenBy">
    SELECT [c].[City]
    FROM [Customers] AS [c]
    ORDER BY [c].[CustomerID] DESC, [c].[Country]
  </baseline>
  <baseline key="TestOrderByDescendingThenByDescending">
    SELECT [c].[City]
    FROM [Customers] AS [c]
    ORDER BY [c].[CustomerID] DESC, [c].[Country] DESC
  </baseline>
  <baseline key="TestOrderByJoin">
    SELECT [c].[CustomerID], [o].[OrderID]
    FROM [Customers] AS [c]
    INNER JOIN [Orders]
    ON ([c].[CustomerID] = [o].[CustomerID])
    ORDER BY [c].[CustomerID], [o].[OrderID]
  </baseline>
  <baseline key="TestOrderBySelectMany">
    SELECT [c].[ContactName], [o].[OrderID]
    FROM [Customers] AS [c]
    INNER JOIN [Orders]
    ON ([c].[CustomerID] = [o].[CustomerID])
    ORDER BY [c].[CustomerID], [o].[OrderID]
  </baseline>
  <baseline key="TestGroupBy">
    SELECT *
    FROM [Customers] AS [c]
    GROUP BY [c].[City]
  </baseline>
  <baseline key="TestGroupBySelectMany">
    SELECT t1.[City], t1.[CompanyName], t1.[ContactName], t1.[Country], t1.[CustomerID], t1.[Phone]
    FROM (
    SELECT t2.[City]
    FROM [Customers] AS [c] AS t2
    GROUP BY t2.[City]
    ) AS t0
    INNER JOIN [Customers] AS t1
    ON ((t1.[City] IS NULL AND t0.[City] IS NULL) OR (t1.[City] = t0.[City]))
  </baseline>
  <baseline key="TestGroupBySum">
    SELECT SUM([o].[OrderID]) AS [agg1]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
  </baseline>
  <baseline key="TestGroupByCount">
    SELECT COUNT(*) AS [agg1]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
  </baseline>
  <baseline key="TestGroupByLongCount">
    SELECT COUNT_BIG(*) AS [agg1]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
  </baseline>
  <baseline key="TestGroupBySumMinMaxAvg">
    SELECT SUM([o].[OrderID]) AS [agg1], MIN([o].[OrderID]) AS [agg2], MAX([o].[OrderID]) AS [agg3], AVG([o].[OrderID]) AS [agg4]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
  </baseline>
  <baseline key="TestGroupByWithResultSelector">
    SELECT SUM([o].[OrderID]) AS [c0], MIN([o].[OrderID]) AS [c1], MAX([o].[OrderID]) AS [c2], AVG([o].[OrderID]) AS [c3]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
  </baseline>
  <baseline key="TestGroupByWithElementSelectorSum">
    SELECT SUM([o].[OrderID]) AS [agg1]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
  </baseline>
  <baseline key="TestGroupByWithElementSelector">
    SELECT [o].[OrderID], [o].[CustomerID]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]

    SELECT [o].[OrderID]
    FROM [Orders] AS [o]
    WHERE ([o].[CustomerID] IS NULL AND @n0 IS NULL) OR ([o].[CustomerID] = @n0)
  </baseline>
  <baseline key="TestGroupByWithElementSelectorSumMax">
    SELECT SUM([o].[OrderID]) AS [agg1], MAX([o].[OrderID]) AS [agg2]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
  </baseline>
  <baseline key="TestGroupByWithAnonymousElement">
    SELECT SUM([o].[OrderID]) AS [agg1]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
  </baseline>
  <baseline key="TestGroupByWithTwoPartKey">
    SELECT SUM([o].[OrderID]) AS [agg2]
    FROM [Orders] AS [o]
    GROUP BY *
  </baseline>
  <baseline key="TestOrderByGroupBy">
    SELECT SUM([o].[OrderID]) AS [agg1]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
  </baseline>
  <baseline key="TestOrderByGroupBySelectMany">
    SELECT t1.[CustomerID], t1.[OrderDate], t1.[OrderID]
    FROM (
    SELECT t2.[CustomerID]
    FROM [Orders] AS [o] AS t2
    GROUP BY t2.[CustomerID]
    ) AS t0
    INNER JOIN [Orders] AS t1
    ON ((t1.[CustomerID] IS NULL AND t0.[CustomerID] IS NULL) OR (t1.[CustomerID] = t0.[CustomerID]))
    ORDER BY t1.[OrderID]
  </baseline>
  <baseline key="TestSumWithNoArg">
    SELECT SUM([o].[OrderID])
    FROM [Orders] AS [o]
  </baseline>
  <baseline key="TestSumWithArg">
    SELECT SUM([o].[OrderID])
    FROM [Orders] AS [o]
  </baseline>
  <baseline key="TestCountWithNoPredicate">
    SELECT COUNT(*)
    FROM [Orders] AS [o]
  </baseline>
  <baseline key="TestCountWithPredicate">
    SELECT COUNT(*)
    FROM [Orders] AS [o]
    WHERE [o].[CustomerID] = 'ALFKI'
  </baseline>
  <baseline key="TestDistinct">
    SELECT DISTINCT *
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestDistinctScalar">
    SELECT DISTINCT [c].[City]
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestOrderByDistinct">
    SELECT DISTINCT [c].[City]
    FROM [Customers] AS [c]
    ORDER BY [c].[CustomerID]
  </baseline>
  <baseline key="TestDistinctOrderBy">
    SELECT DISTINCT [c].[City]
    FROM [Customers] AS [c]
    ORDER BY [c].[CustomerID]
  </baseline>
  <baseline key="TestDistinctGroupBy">
    SELECT [t0].[CustomerID]
    FROM (
    SELECT DISTINCT *
    FROM [Orders] AS [o]
    ) AS [t0]
    GROUP BY [t0].[CustomerID]
  </baseline>
  <baseline key="TestGroupByDistinct">
    SELECT DISTINCT [t0].[CustomerID]
    FROM (
    SELECT [o].[OrderID], [o].[CustomerID]
    FROM [Orders] AS [o]
    GROUP BY [o].[CustomerID]
    ) AS [t0]
  </baseline>
  <baseline key="TestDistinctCount">
    SELECT DISTINCT COUNT(*)
    FROM [Customers] AS [c]
  </baseline>
  <baseline key="TestSelectDistinctCount">
    SELECT COUNT(*)
    FROM (
    SELECT DISTINCT [c].[City]
    FROM [Customers] AS [c]
    ) AS t0
  </baseline>
  <baseline key="TestSelectSelectDistinctCount">
    SELECT COUNT(*)
    FROM (
    SELECT DISTINCT [c].[City]
    FROM [Customers] AS [c]
    ) AS t0
  </baseline>
  <baseline key="TestDistinctCountPredicate">
    SELECT COUNT(*)
    FROM (
    SELECT DISTINCT *
    FROM [Customers] AS [c]
    WHERE [c].[CustomerID] = 'ALFKI'
    ) AS t0
  </baseline>
  <baseline key="TestDistinctSumWithArg">
    SELECT SUM(t0.[OrderID])
    FROM (
    SELECT DISTINCT *
    FROM [Orders] AS [o]
    ) AS t0
  </baseline>
  <baseline key="TestSelectDistinctSum">
    SELECT SUM(DISTINCT [o].[OrderID])
    FROM [Orders] AS [o]
  </baseline>
  <baseline key="TestTake">
    SELECT TOP (5) *
    FROM [Orders] AS [o]
  </baseline>
  <baseline key="TestTakeDistinct">
    SELECT DISTINCT t0.[CustomerID], t0.[OrderDate], t0.[OrderID]
    FROM (
    SELECT TOP (5) *
    FROM [Orders] AS [o]
    ) AS t0
  </baseline>
  <baseline key="TestDistinctTake">
    SELECT TOP (5) [g_2].[CustomerID], [g_2].[OrderDate], [g_2].[OrderID]
    FROM (
    SELECT DISTINCT *
    FROM [Orders] AS [o]
    ) AS [g_2]
  </baseline>
  <baseline key="TestDistinctTakeCount">
    SELECT COUNT(*)
    FROM (
    SELECT TOP (5) t1.[CustomerID], t1.[OrderDate], t1.[OrderID]
    FROM (
    SELECT DISTINCT t2.[CustomerID], t2.[OrderDate], t2.[OrderID]
    FROM [Orders] AS [o] AS t2
    ) AS t1
    ) AS t0
  </baseline>
  <baseline key="TestTakeDistinctCount">
    SELECT COUNT(*)
    FROM (
    SELECT DISTINCT t1.[CustomerID], t1.[OrderDate], t1.[OrderID]
    FROM (
    SELECT TOP (5) t2.[CustomerID], t2.[OrderDate], t2.[OrderID]
    FROM [Orders] AS [o] AS t2
    ) AS t1
    ) AS t0
  </baseline>
  <baseline key="TestSkip">
    SELECT [RowNumberTable].[CustomerID], [RowNumberTable].[City], [RowNumberTable].[CompanyName], [RowNumberTable].[ContactName], [RowNumberTable].[Country], [RowNumberTable].[Phone]
    FROM (
    SELECT *, ROW_NUMBER() OVER(ORDER BY [c].[ContactName]) AS RowNumber
    FROM [Customers] AS [c]
    ) AS [RowNumberTable]
    WHERE [RowNumber] &gt; 5
    ORDER BY [RowNumberTable].[ContactName]
  </baseline>
  <baseline key="TestTakeSkip">
    SELECT [RowNumberTable].[CustomerID], [RowNumberTable].[City], [RowNumberTable].[CompanyName], [RowNumberTable].[ContactName], [RowNumberTable].[Country], [RowNumberTable].[Phone]
    FROM (
    SELECT *, ROW_NUMBER() OVER(ORDER BY [c].[ContactName]) AS RowNumber
    FROM [Customers] AS [c]
    ) AS [RowNumberTable]
    WHERE [RowNumber] &gt; 5 AND [RowNumber] &lt;= 15
    ORDER BY [RowNumberTable].[ContactName]
  </baseline>
  <baseline key="TestDistinctSkip">
    SELECT t0.[City], t0.[CompanyName], t0.[ContactName], t0.[Country], t0.[CustomerID], t0.[Phone]
    FROM (
    SELECT ROW_NUMBER() OVER(ORDER BY t1.[ContactName]) AS [_rownum], t1.[City], t1.[CompanyName], t1.[ContactName], t1.[Country], t1.[CustomerID], t1.[Phone]
    FROM (
    SELECT DISTINCT t2.[City], t2.[CompanyName], t2.[ContactName], t2.[Country], t2.[CustomerID], t2.[Phone]
    FROM [Customers] AS [c] AS t2
    ) AS t1
    ) AS t0
    WHERE t0.[_rownum] &gt; 5
    ORDER BY t0.[ContactName]
  </baseline>
  <baseline key="TestSkipTake">
    SELECT [RowNumberTable].[CustomerID], [RowNumberTable].[City], [RowNumberTable].[CompanyName], [RowNumberTable].[ContactName], [RowNumberTable].[Country], [RowNumberTable].[Phone]
    FROM (
    SELECT *, ROW_NUMBER() OVER(ORDER BY [c].[ContactName]) AS RowNumber
    FROM [Customers] AS [c]
    ) AS [RowNumberTable]
    WHERE [RowNumber] &gt; 5 AND [RowNumber] &lt;= 15
    ORDER BY [RowNumberTable].[ContactName]
  </baseline>
  <baseline key="TestDistinctSkipTake">
    SELECT t0.[City], t0.[CompanyName], t0.[ContactName], t0.[Country], t0.[CustomerID], t0.[Phone]
    FROM (
    SELECT ROW_NUMBER() OVER(ORDER BY t1.[ContactName]) AS [_rownum], t1.[City], t1.[CompanyName], t1.[ContactName], t1.[Country], t1.[CustomerID], t1.[Phone]
    FROM (
    SELECT DISTINCT t2.[City], t2.[CompanyName], t2.[ContactName], t2.[Country], t2.[CustomerID], t2.[Phone]
    FROM [Customers] AS [c] AS t2
    ) AS t1
    ) AS t0
    WHERE t0.[_rownum] BETWEEN (5 + 1) AND (5 + 10)
    ORDER BY t0.[ContactName]
  </baseline>
  <baseline key="TestSkipDistinct">
    SELECT DISTINCT t0.[City], t0.[CompanyName], t0.[ContactName], t0.[Country], t0.[CustomerID], t0.[Phone]
    FROM (
    SELECT t1.[City], t1.[CompanyName], t1.[ContactName], t1.[Country], t1.[CustomerID], t1.[Phone]
    FROM (
    SELECT ROW_NUMBER() OVER(ORDER BY t2.[ContactName]) AS [_rownum], t2.[City], t2.[CompanyName], t2.[ContactName], t2.[Country], t2.[CustomerID], t2.[Phone]
    FROM [Customers] AS [c] AS t2
    ) AS t1
    WHERE t1.[_rownum] &gt; 5
    ) AS t0
  </baseline>
</baselines>